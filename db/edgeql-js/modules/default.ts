// GENERATED by @edgedb/generate v__@edgedb/generate__VERSION_PLACEHOLDER__

import * as $ from "../reflection.ts";
import * as _ from "../imports.ts";
import type * as _std from "./std.ts";
export type $MovieλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "actors": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "subtitle": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "all_caps_title": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, true>;
  "slug": $.PropertyDesc<_std.$str, $.Cardinality.One, false, true, false, false>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "<acted_in[is Person]": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "<acted_in": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Movie = $.ObjectType<"default::Movie", $MovieλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {title: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Movie = $.makeType<$Movie>(_.spec, "ea5f3976-9809-11ef-bdaa-3bbbcee737e0", _.syntax.literal);

const Movie: $.$expr_PathNode<$.TypeSet<$Movie, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Movie, $.Cardinality.Many), null);

export type $MovieWithActorsTxtλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "actors": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "title": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, true, false, false, false>;
}>;
type $MovieWithActorsTxt = $.ObjectType<"default::MovieWithActorsTxt", $MovieWithActorsTxtλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {title: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $MovieWithActorsTxt = $.makeType<$MovieWithActorsTxt>(_.spec, "ea627d5c-9809-11ef-8e79-b136a08afdfc", _.syntax.literal);

const MovieWithActorsTxt: $.$expr_PathNode<$.TypeSet<$MovieWithActorsTxt, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($MovieWithActorsTxt, $.Cardinality.Many), null);

export type $PersonλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "acted_in": $.LinkDesc<$Movie, $.Cardinality.Many, {}, false, true,  false, false>;
  "<actors[is Movie]": $.LinkDesc<$Movie, $.Cardinality.Many, {}, false, false,  false, false>;
  "<actors": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Person = $.ObjectType<"default::Person", $PersonλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {name: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Person = $.makeType<$Person>(_.spec, "ea6063c8-9809-11ef-b772-b1e35004b710", _.syntax.literal);

const Person: $.$expr_PathNode<$.TypeSet<$Person, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Person, $.Cardinality.Many), null);



export { $Movie, Movie, $MovieWithActorsTxt, MovieWithActorsTxt, $Person, Person };

type __defaultExports = {
  "Movie": typeof Movie;
  "MovieWithActorsTxt": typeof MovieWithActorsTxt;
  "Person": typeof Person
};
const __defaultExports: __defaultExports = {
  "Movie": Movie,
  "MovieWithActorsTxt": MovieWithActorsTxt,
  "Person": Person
};
export default __defaultExports;
